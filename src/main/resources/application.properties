#Change the default port of the embedded Tomcat
server.port=80

#spring.jpa.database=POSTGRESQL
#spring.datasource.platform=postgres
#spring.datasource.url=${SPRING_URL}
#spring.datasource.username=${SPRING_USERNAME}
#spring.datasource.password=${SPRING_PASSWORD}
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=password

## The following was the first attempt at connection. It was causing a java.lang.reflect.InvocationTargetException: null
## Added spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true but it still was getting a 404 when attempting testing
## https://dzone.com/articles/spring-boot-and-postgresql had the above settings
##Data source
#spring.datasource.driverClassName=org.postgresql.Driver
#spring.datasource.url=${SPRING_URL}
#spring.datasource.username=${SPRING_USERNAME}
#spring.datasource.password=${SPRING_PASSWORD}
#
##Hibernate and JPA
#spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.generate-ddl=true
## When adding this the java.lang.reflect.InvocationTargetException: null goes away and the program seems to run as expected
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

spring.jackson.serialization.fail-on-empty-beans=false

#AOP
spring.aop.auto=true
    
#Logging
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=INFO
